generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bookmark {
  id        Int    @id @default(autoincrement())
  userId    Int
  forestId  Int
  createdAt DateTime @default(now())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  forest    Forest @relation(fields: [forestId], references: [id], onDelete: Cascade)
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  company      String?
  role         String   @default("user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  bookmarks    Bookmark[]
  cartItems    CartItem[]
  emailVerified Boolean  @default(false)
  stripeCustomerId String?
}

model Forest {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  type        String
  area        Float
  description String
  status      String
  lastUpdated DateTime
  credits     CarbonCredit[]
  bookmarks   Bookmark[]
}

model CarbonCredit {
  id               Int          @id @default(autoincrement())
  forestId         Int
  vintage          Int
  certification    String
  totalCredits     Int
  availableCredits Int
  pricePerCredit   Float
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  forest           Forest   @relation(fields: [forestId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  cartItems        CartItem[]
  symbol           String    @default("tCOâ‚‚")
  retiredCredits   Int       @default(0)
  exchangeRates    ExchangeRate[]
}

model ExchangeRate {
  id             Int          @id @default(autoincrement())
  carbonCredit   CarbonCredit @relation(fields: [carbonCreditId], references: [id], onDelete: Cascade)
  carbonCreditId Int
  rate           Float        // USD per CC
  currency       String       @default("USD")
  effectiveFrom  DateTime
  effectiveTo    DateTime?
  orderItems     OrderItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  createdAt  DateTime    @default(now())
  status     String
  totalPrice Float
  totalCredits Int      @default(0)
  currency   String     @default("USD")
  totalUsd   Float      @default(0)
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  paymentIntentId String?
  paidAt     DateTime?
  shippingAddress String?
}

model OrderItem {
  id             Int          @id @default(autoincrement())
  orderId        Int
  carbonCreditId Int
  quantity       Int
  pricePerCredit Float
  subtotal       Float
  usdAmount      Float      @default(0)
  exchangeRate   ExchangeRate? @relation(fields: [exchangeRateId], references: [id])
  exchangeRateId Int?
  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carbonCredit   CarbonCredit @relation(fields: [carbonCreditId], references: [id], onDelete: Cascade)
  retired        Boolean      @default(false)
}

model CartItem {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  carbonCredit   CarbonCredit  @relation(fields: [carbonCreditId], references: [id], onDelete: Cascade)
  carbonCreditId Int
  quantity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  addedAt        DateTime      @default(now())
  @@unique([userId, carbonCreditId])
} 